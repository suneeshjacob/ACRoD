from jacobian_spatial import jacobian as jacobian_spatial
from jacobian_planar import jacobian as jacobian_planar
import numpy

def test_planar_3Rs():
    A = numpy.matrix('9 1 0 0;1 9 1 0;0 1 9 1;0 0 1 9')
    assert str(jacobian_planar(A)[0]) == 'Matrix([[-a_y + r_{(1,2)y}, -a_y + r_{(2,3)y}, -a_y + r_{(3,4)y}], [a_x - r_{(1,2)x}, a_x - r_{(2,3)x}, a_x - r_{(3,4)x}], [1, 1, 1]])'

def test_planar_3RPRp():
    A = numpy.matrix('9 1 0 1 0 1 0 0;0 9 2 0 0 0 0 0;0 1 9 0 0 0 0 1;0 0 0 9 2 0 0 0;0 0 0 1 9 0 0 1;0 0 0 0 0 9 2 0;0 0 0 0 0 1 9 1;0 0 0 0 0 0 0 9')
    assert str(jacobian_planar(A)[:3]) == '[Matrix([\n[n_{(2,3)x}, 0, 0],\n[n_{(2,3)y}, 0, 0],\n[         0, 0, 0]]), Matrix([\n[-a_y + r_{(1,2)y}, 0, 0, -a_y + r_{(3,8)y}, 0, 0],\n[ a_x - r_{(1,2)x}, 0, 0,  a_x - r_{(3,8)x}, 0, 0],\n[                1, 0, 0,                 1, 0, 0]]), Matrix([\n[          0,          0,          0],\n[-n_{(2,3)x},          0, n_{(6,7)x}],\n[-n_{(2,3)y},          0, n_{(6,7)y}],\n[          0,          0,          0],\n[-n_{(2,3)x}, n_{(4,5)x},          0],\n[-n_{(2,3)y}, n_{(4,5)y},          0]])]'
    
def test_planar_5Rp():
    A = numpy.matrix('9 1 0 1 0;1 9 1 0 0;0 0 9 0 1;1 0 0 9 1;0 0 0 0 9')
    assert str(jacobian_planar(A)[:3]) == '[Matrix([\n[-a_y + r_{(1,2)y}, 0],\n[ a_x - r_{(1,2)x}, 0],\n[                1, 0]]), Matrix([\n[-a_y + r_{(2,3)y}, -a_y + r_{(3,5)y}, 0],\n[ a_x - r_{(2,3)x},  a_x - r_{(3,5)x}, 0],\n[                1,                 1, 0]]), Matrix([\n[               -1,                 1],\n[ a_y - r_{(1,2)y}, -a_y + r_{(1,4)y}],\n[-a_x + r_{(1,2)x},  a_x - r_{(1,4)x}]])]'

def test_planar_4R4Psp():
    A = numpy.matrix('9 2 2 0 0 0 0;1 9 0 2 0 0 0;1 0 9 2 0 0 0;0 0 0 9 1 1 0;0 0 0 1 9 0 1;0 0 0 0 0 9 1;0 0 0 0 0 0 9')
    assert str(jacobian_planar(A)[:3]) == '[Matrix([\n[-a_y + r_{(4,5)y}, n_{(1,2)x}, 0],\n[ a_x - r_{(4,5)x}, n_{(1,2)y}, 0],\n[                1,          0, 0]]), Matrix([\n[0, -a_y + r_{(5,7)y}, 0, n_{(2,4)x}, 0],\n[0,  a_x - r_{(5,7)x}, 0, n_{(2,4)y}, 0],\n[0,                 1, 0,          0, 0]]), Matrix([\n[               -1,           0,          0],\n[ a_y - r_{(4,5)y},           0,          0],\n[-a_x + r_{(4,5)x},           0,          0],\n[                0, -n_{(1,2)x}, n_{(1,3)x}],\n[                0, -n_{(1,2)y}, n_{(1,3)y}]])]'

def test_spatial_6Rs():
    A = numpy.matrix('9 1 0 0 0 0 0;1 9 1 0 0 0 0;0 1 9 1 0 0 0;0 0 1 9 1 0 0;0 0 0 1 9 1 0;0 0 0 0 1 9 1;0 0 0 0 0 1 9')
    assert str(jacobian_spatial(A)[0]) == 'Matrix([[n_{(1,2)y}*(a_z - r_{(1,2)z}) - n_{(1,2)z}*(a_y - r_{(1,2)y}), n_{(2,3)y}*(a_z - r_{(2,3)z}) - n_{(2,3)z}*(a_y - r_{(2,3)y}), n_{(3,4)y}*(a_z - r_{(3,4)z}) - n_{(3,4)z}*(a_y - r_{(3,4)y}), n_{(4,5)y}*(a_z - r_{(4,5)z}) - n_{(4,5)z}*(a_y - r_{(4,5)y}), n_{(5,6)y}*(a_z - r_{(5,6)z}) - n_{(5,6)z}*(a_y - r_{(5,6)y}), n_{(6,7)y}*(a_z - r_{(6,7)z}) - n_{(6,7)z}*(a_y - r_{(6,7)y})], [-n_{(1,2)x}*(a_z - r_{(1,2)z}) + n_{(1,2)z}*(a_x - r_{(1,2)x}), -n_{(2,3)x}*(a_z - r_{(2,3)z}) + n_{(2,3)z}*(a_x - r_{(2,3)x}), -n_{(3,4)x}*(a_z - r_{(3,4)z}) + n_{(3,4)z}*(a_x - r_{(3,4)x}), -n_{(4,5)x}*(a_z - r_{(4,5)z}) + n_{(4,5)z}*(a_x - r_{(4,5)x}), -n_{(5,6)x}*(a_z - r_{(5,6)z}) + n_{(5,6)z}*(a_x - r_{(5,6)x}), -n_{(6,7)x}*(a_z - r_{(6,7)z}) + n_{(6,7)z}*(a_x - r_{(6,7)x})], [n_{(1,2)x}*(a_y - r_{(1,2)y}) - n_{(1,2)y}*(a_x - r_{(1,2)x}), n_{(2,3)x}*(a_y - r_{(2,3)y}) - n_{(2,3)y}*(a_x - r_{(2,3)x}), n_{(3,4)x}*(a_y - r_{(3,4)y}) - n_{(3,4)y}*(a_x - r_{(3,4)x}), n_{(4,5)x}*(a_y - r_{(4,5)y}) - n_{(4,5)y}*(a_x - r_{(4,5)x}), n_{(5,6)x}*(a_y - r_{(5,6)y}) - n_{(5,6)y}*(a_x - r_{(5,6)x}), n_{(6,7)x}*(a_y - r_{(6,7)y}) - n_{(6,7)y}*(a_x - r_{(6,7)x})], [n_{(1,2)x}, n_{(2,3)x}, n_{(3,4)x}, n_{(4,5)x}, n_{(5,6)x}, n_{(6,7)x}], [n_{(1,2)y}, n_{(2,3)y}, n_{(3,4)y}, n_{(4,5)y}, n_{(5,6)y}, n_{(6,7)y}], [n_{(1,2)z}, n_{(2,3)z}, n_{(3,4)z}, n_{(4,5)z}, n_{(5,6)z}, n_{(6,7)z}]])'

def test_spatial_RSSRp():
    A = numpy.matrix('9 1 0 1;1 9 4 0;0 0 9 4;0 0 0 9')
    assert str(jacobian_spatial(A)[:3]) == '[Matrix([\n[ n_{(1,2)y}*(a_z - r_{(1,2)z}) - n_{(1,2)z}*(a_y - r_{(1,2)y})],\n[-n_{(1,2)x}*(a_z - r_{(1,2)z}) + n_{(1,2)z}*(a_x - r_{(1,2)x})],\n[ n_{(1,2)x}*(a_y - r_{(1,2)y}) - n_{(1,2)y}*(a_x - r_{(1,2)x})],\n[                                                    n_{(1,2)x}],\n[                                                    n_{(1,2)y}],\n[                                                    n_{(1,2)z}]]), Matrix([\n[0,                 0,  a_z - r_{(2,3)z}, -a_y + r_{(2,3)y},                 0,  a_z - r_{(3,4)z}, -a_y + r_{(3,4)y}],\n[0, -a_z + r_{(2,3)z},                 0,  a_x - r_{(2,3)x}, -a_z + r_{(3,4)z},                 0,  a_x - r_{(3,4)x}],\n[0,  a_y - r_{(2,3)y}, -a_x + r_{(2,3)x},                 0,  a_y - r_{(3,4)y}, -a_x + r_{(3,4)x},                 0],\n[0,                 1,                 0,                 0,                 1,                 0,                 0],\n[0,                 0,                 1,                 0,                 0,                 1,                 0],\n[0,                 0,                 0,                 1,                 0,                 0,                 1]]), Matrix([\n[                                                                                                          -n_{(1,2)x}],\n[                                                                                                          -n_{(1,2)y}],\n[                                                                                                          -n_{(1,2)z}],\n[                                                       -n_{(1,2)y}*(a_z - r_{(1,2)z}) + n_{(1,2)z}*(a_y - r_{(1,2)y})],\n[                                                        n_{(1,2)x}*(a_z - r_{(1,2)z}) - n_{(1,2)z}*(a_x - r_{(1,2)x})],\n[                                                       -n_{(1,2)x}*(a_y - r_{(1,2)y}) + n_{(1,2)y}*(a_x - r_{(1,2)x})],\n[n_{(1,2)x}*(-r_{(2,3)x} + r_{(3,4)x}) + n_{(1,2)y}*(-r_{(2,3)y} + r_{(3,4)y}) + n_{(1,2)z}*(-r_{(2,3)z} + r_{(3,4)z})]])]'
